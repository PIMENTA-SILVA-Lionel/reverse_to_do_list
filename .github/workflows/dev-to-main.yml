name: Dev to Main CI/CD

on:
  push:
    branches:
      - main  # Trigger when changes are pushed to the main branch

jobs:
  build-and-test:
    name: Build, Test, and Run E2E
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js for Backend, Frontend, and E2E tests
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 3: Install dependencies
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install E2E Test Dependencies
        working-directory: ./e2e-tests
        run: npm ci

      # Step 4: Run Unit Tests
      - name: Run Backend Unit Tests
        working-directory: ./backend
        run: npm test

      - name: Run Frontend Unit Tests
        working-directory: ./frontend
        run: npm test

      # Step 5: Run End-to-End Tests (E2E)
      - name: Set Up Firefox and GeckoDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y firefox
          wget https://github.com/mozilla/geckodriver/releases/download/v0.33.0/geckodriver-v0.33.0-linux64.tar.gz
          tar -xvzf geckodriver-v0.33.0-linux64.tar.gz
          sudo mv geckodriver /usr/local/bin/
          chmod +x /usr/local/bin/geckodriver

      - name: Fix Mocha Permissions
        working-directory: ./e2e-tests
        run: chmod +x ./node_modules/.bin/mocha

      - name: Run E2E Tests
        working-directory: ./e2e-tests
        env:
          CI: true
        run: npx mocha test.js

  build-and-push-docker:
    name: Build and Push Docker Images
    needs: build-and-test
    if: success()  # Trigger this only if the tests pass
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub (using secrets for better security)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Use GitHub secrets for Docker username
          password: ${{ secrets.DOCKER_PASSWORD }}  # Use GitHub secrets for Docker password

      # Step 3: Build Docker images using docker-compose
      - name: Build Docker Images
        run: docker-compose build

      # Step 4: Push Docker images to Docker Hub
      - name: Push Docker Images
        run: docker-compose push
